#!/bin/bash
## $Id: archive,v 1.191 2018/07/07 11:37:39 fulford Exp fulford $
# $Source: /src/admin/usr/local/etc/RCS/archive,v $
# $Revision: 1.191 $
# Author C W Fulford.
# Copyright 2014 (c) C W Fulford. 
# Licensed for public use under the GPL.
# For assistance contact fulford@fulford.net 0709 229 5385
###################################################################
cmd=`basename $0`
syntax="$cmd [[-b]|[[-f]|[-r]] [-c <config>] [-d(debug)] [-v(erbose)] [-z(ip)] <host_id>|-V"
ver=`echo "$Id: archive,v 1.191 2018/07/07 11:37:39 fulford Exp fulford $"|awk '{print $3,$4,$5}'`
r=0
dbtmp=/tmp/$cmd-db$$
mysqldump=/usr/bin/mysqldump
xtmp=/tmp/$cmd-x$$
rsync=rsync
tmp=/tmp/$cmd-$$
db=0
files=0
rs=0
status="status=none"
only=0
echo "$*" |grep -q "\-b" && only=`expr $only + 1`
echo "$*" |grep -q "\-f" && only=`expr $only + 1`
echo "$*" |grep -q "\-r" && only=`expr $only + 1`

[ $only -gt 1  ] && {
	echo "$cmd: only one of -f, -b  or -r allowed." >&2
	_end 1 
}

while [ $# -gt 0 ] ;do
	case $1 in 
		-D) delete=0;shift;;
		-b) files=1;rs=1;shift;;
		-c) config=$2;shift 2;;
		-d) debug=1;set -x;unset status;shift;;
		-f) db=1;rs=1;shift;;
		-l) log=:;shift;;
		-r) db=1;files=1;shift;; 
		-t) mode=test;shift;;
		-v) verbose=:;shift;;
		-V) echo "$cmd $ver";exit;;
		-z) zip=y;shift;;
		 *) host_id=$1;shift ;;
	esac
done
config=${config:-"/usr/local/etc/archive.cf"}
[ -z "$host_id" ]&&{ echo "$cmd: host_id required" >&2 ;exit 1 ;}
start=`date`
[ "$log" ] && logger -t archive: "$cmd of $host_id started"
[ "$verbose" ] && echo "$cmd on $host_id started $start" >&2


# Finish off
_end () {
	r=$1
	if [ "$r" -eq 0 ];then
		[ "$log" ] &&{
		   logger -t archive "$cmd of $host from `hostname` finished"
		}
		[ "$verbose" ] && {
		   echo "$cmd of $host from `hostname` finished `date`">&2
		}
	else
		[ "$log" ] && {
		   host=${host:="unknown($host_id)"}	
		   logger -t archive: "$cmd on $host from `hostname` failed"
		}
		echo "$cmd on $host from `hostname` failed" >&2
		[ -f $tmp ] && cat $tmp
		[ -f $dbtmp ] && cat $dbtmp
		
	fi
	[ -f $tmp ] && rm $tmp
	[ -f $dbtmp ] && rm $dbtmp
	exit $r
}

# Check if configuration available
if [ -r $config ];then
	grep -q "^$host_id:$" $config ||{
		echo "$cmd: $host_id not found in $config">&2
		logger -t archive: "$host_id not found in $config."
		_end 1
	}
else
	echo "$cmd: Can't read $config" >&2
	exit 1
fi

# Extract config for host_id
sed -ne '/^'$host_id':/,/^$/{
	/^[	 ]db:.*/d 
	/^[	 ]exclude:.*/d 
	/^[	 ].*/p
}' $config >$tmp
[ $verbose ] && cat $tmp

# Set config
. $tmp
	
# Get excludes for host
sed -ne '/^merlin:$/,/^$/{
          s/[\t ]*exclude:\(.*\)$/\1/p
}' <$config >$xtmp
[ $verbose ] && cat $xtmp

# Add -v to rsync opts if in verbose mode
if [ $verbose ];then
	rs_opts="$rs_opts -v"
fi

# Add --del to rsync opts if delete set
if [ $delete ];then
	rs_opts="$rs_opts --del"
fi

# Get databases to archive
sed -ne '/^'$host_id':/,/^$/p' $config|
	awk -F: '/^[ \t]db:/{print $2}' >$dbtmp
ftphost=${ftphost:-$host}
[ $host != `hostname -f` ] && { remote="ssh -y $host";bs="bs=8192" ;}

# Functions
# backup files if true 

# backup databases if true
[ $db -eq 0 ] && {
	cat $dbtmp|
	while read line;do
		pass=`echo $line|awk -F= '{printf $2}'`
		if [ $pass ] ;then 
			user=$db
			pass="-p$pass"
		else
			user=root
			pass=""
		fi
		db=`echo $line|awk -F'=' '{printf $1}'`
		archive=$dest/$db.`date +%u`.sql
		[ "$verbose" ] &&{
		     echo "sudo $mysqldump -h $host -u $user $pass --databases $db|">&2
		     echo "dd $status of=$archive">&2
		}
		[ $log ] && logger -t $cmd "sqldump of $db as $user started"
		sudo $mysqldump -h $host -u $user $pass $db|sudo dd $status of=$archive
		r=$?
		[ $llog ] && {
			if [ $r -eq 0 ] ;then
			 	result=completed
			else
				result=failed
			fi
			logger -t $cmd "sqldump of $db as $user failed"
		}
	done
}

# do rsync if true).
[ $rs -eq 0 ] &&{
	# check for rsync
	if [ -n "$rs_opts" ] ;then
		# Add excludes to variable rs_xclude
		xclude=`awk <$xtmp '{printf(" --exclude %s",$1)}'`

		# Add excludes to rsync opts
		rs_opts="$rs_opts $xclude"

		[ "$root_usr" = y ] && {
			sudo="sudo"
		}
		[ $verbose ] && {
			echo "$cmd: starting $rsync $rs_opts $rsrc $rest:" >&2
		}
		[ $log ] && {
			echo logger -t $cmd  "starting $rsync $rs_opts  on $host" 
		}
		if $remote $sudo $rsync $rs_opts $rsrc $rs_dest;then
			 result="complete"
		else
			 result="failed" 
		fi
		[ $verbose ] && {
			echo "$cmd: rsync on $host $result" >&2
		} 
		[ $log ] && {
			logger -t $cmd "rsync of $host $result"
		}
	fi
}

#backup files if true 
#if [ $files -eq 0 ] ;tnen
#	[ $verbose ] &&{
#		echo "$cmd: Backing up file systems">&2
#	}
#	_backup_files()
#fi
_end $r
