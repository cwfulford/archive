#!/bin/bash
# $Id: archive,v 1.204 2018/10/08 18:58:55 fulford Exp fulford $
# $Source: /src/admin/usr/local/etc/RCS/archive,v $
# $Revision: 1.204 $
# Author C W Fulford.
# Copyright 2014 - 2018 (c) C W Fulford. 
# Licensed for public use under the GPL.
# For assistance contact fulford@fulford.net 0793 572 8612
###############################################################
if [ ! -t 0 ];then
	out=/var/log/archive/out.`date +%w`
	exec >$out 2>&1
fi
cmd=`basename $0`
trap 'echo $cmd: terminated with signal 2;exit' 2
trap 'echo $cmd: terminated with signal 15;exit' 15
 
syntax="$cmd [[-b]|[[-f]|[-r]] [-c <config>] [-d(debug)] [-v(erbose)] [-z(ip)] <host_id>|-V"
ver=`echo "$Id: archive,v 1.204 2018/10/08 18:58:55 fulford Exp fulford $"|awk '{print $3,$4,$5}'`
r=0
dbtmp=/tmp/$cmd-db$$
mailto=fulford@citylinux.com
mailmsg=/tmp/mailmsg$$
mysqldump=/usr/bin/mysqldump
xtmp=/tmp/$cmd-x$$
rsync=rsync
sendmail=/usr/bin/sendmail #correct in config file if necessary
tmp=/tmp/$cmd-$$
status="status=none" # used by dd


while [ $# -gt 0 ] ;do
	case $1 in 
		-D) delete=0;shift;;
		-db) archive="$archive db";shift;; #do database dump
		-c) config=$2;shift 2;;
		-d) debug=1;set -x;unset status;shift;;
		-l) log=:;shift;;
		-m) email=0;shift;;
		-r) archive="$archive rs";shift;; # do sync backup
		-t) archive="$archive tar";shift;; # do tar backup
		-v) verbose=:;shift;;
		-V) echo "$cmd $ver";exit;;
		-z) zip=y;shift;;
		 *) host_id=$1;shift ;;
	esac
done
archive=${archive:="rs"} # default action rsync
config=${config:-"/usr/local/etc/archive.cf"}
[ -z "$host_id" ]&&{ echo "$cmd: host_id required" >&2 ;exit 1 ;}
start=`date`
[ "$log" ] && logger -t $cmd "$cmd of $host_id started"
[ "$verbose" ] && echo "$cmd on $host_id started $start" >&2


# Finish off
_end (){
	[ $verbose ] &&{
		echo "$cmd: completed `date`"
	}
	[ $log ] &&{
		logger -t $cmd "completed `date`"
	}
	[ $email ] &&{
		[ -x $sendmail ]||{
			echo "$cmd $sendmail not found" >&2
			exit 1
		}
		cat ${out:=/dev/null} >>$mailmsg
		cat $tmp >>$mailmsg
		cat $dbtmp >>$mailmsg
		cat $xtmp >>$mailmsg

		$sendmail -f $mailfrom  $mailto <<- .
			Subject: $msg $overall

		.
	} 
	[ $log ] &&{
		logger -t $cmd $result	
	}
	[ -f $tmp ] && rm $tmp
	[ -f $dbtmp ] && rm $dbtmp
	[ -f $xtmp ] && rm $xtmp
	exit $ex_rv
}

# Check if configuration available
if [ -r $config ];then
	grep -q "^$host_id:$" $config ||{
		echo "$cmd: $host_id not found in $config">&2
		logger -t $cmd "$host_id not found in $config."
		_end 1
	}
else
	echo "$cmd: Can't read $config" >&2
	exit 1
fi

# Extract config for host_id
sed -ne '/^'$host_id':/,/^$/{
	/^[	 ]db:.*/d 
	/^[	 ]exclude:.*/d 
	/^[	 ].*/p
}' $config >$tmp

[ $verbose ] && cat $tmp >&2

# Set config
. $tmp

if [ $email ] ;then
	[ -n "$mailto" -a -n "$mailfrom" ] ||{
		echo "$cmd: \$mailto and  \$mailfrom must set in config." >&2 
		exit 1
	}
fi

# Check if sudo required
[ "$root_usr" = y ] && {
		[ `id -un` = "root" ] ||{	
			sudo=${sudo:=/usr/bin/sudo}
			[ -x $sudo ] ||{
				echo "$cmd: Can\'t find $sudo" >&2
				exit 1
			}

		}
}
	
# Get excludes for host
sed -ne '/^'$host':$/,/^$/{
          s/[\t ]*exclude:\(.*\)$/\1/p
}' <$config >$xtmp
[ $verbose ] && cat $xtmp >&2



# Get databases to archive
sed -ne '/^'$host_id':/,/^$/p' $config|
	awk -F: '/^[ \t]db:/{print}' >$dbtmp
ftphost=${ftphost:-$host}
if [ "$setremote" = "yes" ]; then 
	[ $host != `hostname -f` ] && { remote="ssh -y $host";bs="bs=8192" ;		}
else
	remote=""
fi


# Functions
# tar dump
_tardump () {
	[ -n "$tarcmd" ] ||{
		echo "$cmd: tar command not set">&2
		exit 1
	}
	if echo $tar_dest|grep -q ":" ;then
		tar_host=`echo $tar_dest |awk -F: '{print $1}'` 
		tar_dest=`echo $tar_dest |awk -F: '{print $2}'` 
	fi
	tdmsg="tardump started `date`"
	[ $verbose ] &&{
		echo "$cmd: tar archive of $fs starte"
	}
	[ $log ] &&{
		logger -t $cmd "$tdmsg"
	}
	[ $email ] &&{
		echo "$tdmsg" >>$mailmsg
	}
	
	for fs in $tarsrc ;do
		case $fs in
			/) fsd=root;;
			*) fsd=`echo $fsd|sed -ne 's/\///'`
		esac
		fsd=${fsd}`date +%w`.tar.gz
		echo "$sudo $tarcmd $fs|ssh $tar_host \"sudo dd=$tar_dest$fs\""
		$sudo $tarcmd $fs|ssh $tar_host "sudo dd of=$tar_dest/$fsd"
		if [ $? -eq 0 ] ;then
			result=completed
		else 
			result=failed
			overall=errors
		fi
		[ $verbose ] &&{
			echo "$cmd: tar archive of $fs $result"
		}
		[ $log ] &&{
			logger -t archive "tar archive of $fs $result"
		}
		[ $email ] &&{
			echo "tar archive of $fs $result">mailmsg
		}
	done

}

# backup databases i
_dbdump () {
	cat $dbtmp|
	while read line;do
		db=`echo $line|awk -F: '{printf $2}'`
		user=`echo $line|awk -F: '{printf $3}'`
		pass=`echo $line|awk -F: '{printf $4}'`
		if [ $pass ] ;then 
			pass="-p$pass"
		else
			user=root
			pass=""
		fi
		archive=$db.`date +%u`.sql
		tdbhost=`echo $dbdest|awk -F: '{printf $1}'`
		tdbdir=`echo $dbdest|awk -F: '{printf $1}'`

		dbmsg="sqldump of $db as $user on $host" 

		[ $verbose ] &&{
			echo "$cmd: $dbmsg started"
		}
		[ $log ] &&{
			logger -t $cmd "$dbmsg started"
		}
		[ $email ] &&{
			echo "$dbmsg started" >>$mailmsg
		}
		
		$sudo $mysqldump -h $host -u $user $pass $db|\
			ssh $tdbhost $sudo dd $status of=$tdbdir/$archive
		db_rv=$?
		cx_rv=$(expr $ex_rv + $db_rv)
		
		if [ $db_rv -eq 0 ] ;then
			result=completed
		else
			result=failed
			overall=errors
		fi
		[ $verbose ] &&{
			echo "$cmd: $dbmsg $result" 
		}	
		[ $log ] && {
			logger -t $cmd "$dbmsg $result"
		}
	done
}

_rsync (){
	# Add -v to rsync opts if in verbose mode
	if [ $verbose ];then
		rs_opts="$rs_opts -v"
	fi

	# Add --del to rsync opts if delete set
	if [ $delete ];then
		rs_opts="$rs_opts --del"
	fi

	# Add excludes if any 
	xclude=`awk <$xtmp '{printf(" --exclude %s",$1)}'`

	rsmsg="rsync of $host to $rs_dest"

	[ $verbose ] &&{
		echo "$cmd: $rsmsg started" 
	}
	
	[ $log ] &&{
		logger -t $cmd "$rsmsg started"
	}
	[ $email ] &&{
		echo "$rsmsg started">>$mailmsg
	}
	
	# run rsync and check status on completion
	$remote $sudo $rsync $rs_opts $xclude  $rsrc $rs_dest
	rs_rv=$?
	ex_rv=$(expr $ex_rv + $rs_rv)
	if [ $rs_rv -eq 0 ];then
		result="complete"
	else
		result="failed" 
		overall="errors"
	fi
	[ $verbose ] &&{
		echo "$cmd: $rsmsg $result" 
	}
	[ $log ] &&{
		logger -t $cmd  "$rsmsg $result"
	}
	[ $email ] &&{
		echo "$rsmsg $result" >>$mailmsg
	}

	
} # end of _rsync


[ $verbose ]&&{
	echo "$cmd: started `date`"
}
[ $log ]&&{
	logger -t $cmd "started `date`"
}
[ $email ]&&{
	echo "$cmd: started `date`" >$mailmsg
}
# run selected archive 
for action in $archive; do
	case $action in
		rs) _rsync;shift;;
		db) _dbdump;shift;;
		tar) _tardump;shift;;
	esac
done

_end $ex_rv


