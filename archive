#!/bin/bash
## $Id: archive,v 1.157 2018/02/06 20:14:10 fulford Exp fulford $
# $Source: /src/admin/usr/local/etc/RCS/archive,v $
# $Revision: 1.157 $
# Author C W Fulford.
# Copyright 2014 (c) C W Fulford. 
# Licensed for public use under the GPL.
# For assistance contact fulford@fulford.net 0709 229 5385
###################################################################
cmd=`basename $0`
syntax="$cmd [[-b]|[[-f]|[-r]] [-c <config>] [-d(debug)] [-v(erbose)] [-z(ip)] <host_id>|-V"
ver=`echo "$Id: archive,v 1.157 2018/02/06 20:14:10 fulford Exp fulford $"|awk '{print $3,$4,$5}'`
r=0
mysqldump=/usr/bin/mysqldump
db=0
files=0
rs=0
status="status=none"
only=0
echo "$*" |grep -q "\-b" && only=`expr $only + 1`
echo "$*" |grep -q "\-f" && only=`expr $only + 1`
echo "$*" |grep -q "\-r" && only=`expr $only + 1`

[ $only -gt 1  ] && {
	echo "$cmd: only one of -f, -b  or -r allowed." >&2
	exit
}

while [ $# -gt 0 ] ;do
	case $1 in 
		-b) files=1;rs=1;shift;;
		-c) config=$2;shift 2;;
		-d) debug=1;set -x;unset status;shift;;
		-f) db=1;rs=1;shift;;
		-l) log=:;shift;;
		-r) db=1;files=1;shift;; 
		-t) mode=test;shift;;
		-v) verbose=:;shift;;
		-V) echo "$cmd $ver";exit;;
		-z) zip=y;shift;;
		 *) host_id=$1;shift ;;
	esac
done
config=${config:-"/usr/local/etc/archive.cf"}
[ -z "$host_id" ]&&{ echo "$cmd: host_id required" >&2 ;exit 1 ;}
tmp=/tmp/$cmd-$$
dbtmp=/tmp/$cmd-db$$
start=`date`
[ "$log" ] && logger -t archive: "$cmd on $host_id started"
[ "$verbose" ] && echo "$cmd on $host_id started $start" >&2

# Check if configuration available
if [ -r $config ];then
	grep -q $host_id $config ||{
		echo "$cmd: $host_id not found in $config">&2
		exit 1
	}
else
	echo "$cmd: Can't read $config" >&2
	exit 1
fi

# Extract config for host
sed -ne '/^'$host_id':/,/^$/{
	/^[	 ]db:.*/d 
	/^[	 ]exclude:.*/d 
	/^[	 ].*/p
}' $config >$tmp
[ $verbose ] && cat $tmp

# Set config
. $tmp

# Get excludes for host
sed -ne '/^merlin:$/,/^$/{
          s/[      ]*exclude:\(.*\)$/--exclude \1/p
}' <$config|
       awk '{x=$0" "x}END{print x}' > $tmp 
[ $verbose ] && cat $tmp

# Add excludes to rsync opts
rs_opts="$rs_opts $(<$tmp)"
# Get databases to archive
sed -ne '/^'$host_id':/,/^$/p' $config|
	awk -F: '/^[ \t]db:/{print $2}' >$dbtmp
ftphost=${ftphost:-$host}
[ $host != `hostname -f` ] && { remote="ssh -y $host";bs="bs=8192" ;}

_end () {
	if [ "$r" -eq 0 ];then
		[ "$log" ] && logger -t archive: "$cmd on $host finished"
		[ "$verbose" ] && echo "$cmd on $host finished `date`" >&2
	else
		[ "$log" ] && logger -t archive: "$cmd on $host failed"
		echo "$cmd on $host failed" >&2
		cat $tmp
		[ -f $dbtmp ] && cat $dbtmp
		
	fi
	rm $tmp
	[ -f $dbtmp ] && rm $dbtmp

}

[ -z "$dest" ] &&{ echo "$cmd: no tape device specified for $host">&2;exit 1;}
sudo [ -e "$dest" ] ||{ echo "$cmd: $dest does not exist">&2;exit 1;}
[ -z "$backup" ] &&{
	echo "$cmd: no backup command specified for $host">&2;exit 1
}

if sudo [ ! -w $dest ];then
	echo "$backup: Can't write to $dest">&2 ;_end
fi
# backup databases if true
[ $db -eq 0 ] && {
	cat $dbtmp|
	while read line;do
		pass=`echo $line|awk -F= '{printf $2}'`
		if [ $pass ] ;then 
			user=$db
			pass="-p$pass"
		else
			user=root
			pass=""
		fi
		archive=$dest/$db.`date +%u`.sql
		db=`echo $line|awk -F'=' '{printf $1}'`
		[ "$verbose" ] &&{
		     echo "sudo $mysqldump -h $host -u $user $pass --databases $db|">&2
		     echo "dd $status of=$archive">&2
		}
		[ $log ] && logger -t $cmd "sqldump of $db as $user started"
		sudo $mysqldump -h $host -u $user $pass $db|sudo dd $status of=$archive
		r=$?
		[ $llog ] && {
			if [ $r -eq 0 ] ;then
			 	result=completed
			else
				result=failed
			fi
			logger -t $cmd "sqldump of $db as $user failed"
		}
	done
}

# do rsync if true).
[ $rs -eq 0 ] &&{
	# check for rsync
	if [ -n "$rs_opts" ] ;then
		[ "$root_usr" = y ] && {
			sudo="sudo"
		}
		[ $verbose ] && {
			echo "$cmd: starting rsync on $host" >&2
		}
		[ $log ] && {
			echo logger -t $cmd  "starting rsync on $host" 
		}
		echo $remote "$sudo rsync $rs_opts $rsrc $rdest && echo complete || echo failed"
		exit
		result=`$remote "$sudo rsync $rs_opts $rsrc $rdest && echo complete || echo failed"`
		[ $verbose ] && {
			echo "$cmd: rsync on $host $result" >&2
		} 
		[ $log ] && {
			logger -t $cmd "rsync on $host $result"
		}
	fi
}

#backup files if true 
[ $files -eq 0 ] &&{
  method=`echo $backup|awk '{print $1}'`
  case $method in	
  	tar) if [ -n "$fss" ] ;then
		$remote df -l|
		awk 'NR > 1{
		 if($1 !~ /tmpfs/ && $1 !~ /loop/ && $1 !~ /sr0/)print $6}'>$tmp
		n=`cat $tmp|wc -l` 
		c=0
		while [ $c -le $n ];do
			c=`expr $c + 1`
			fss="$fss `awk <$tmp -v c=$c 'NR == c{print}'`"
		done
	      fi
	      for fs in $fss ;do
	   	fn=`basename $fs`
		[ $fn = "/" ] && fn=root
		archive=`date +%u`.${fn}.tar
		[ "$zip" ] && archive=${archive}.gz
		[ $verbose ] && {
			echo -n "$cmd: file system $fn on $host to $archive: ">&2
		}
		[ $log ] && {
			logger -t $cmd "file system $fn on $host to $archive: started"
		}
		[ "$mode" = "test" ] &&{ echo="echo -n" ;}
		if [ -n "$remote" ];then 
			$remote "sudo $backup - $fs 2>/dev/null|gzip -c|
			dd $status bs=8192" |
			sudo dd $status of=$dest/$archive
		else
			if [ "$zip" = "y" ];then 
				sudo $backup - $fs 2>/dev/null|sudo gzip|
				sudo dd $status of=$dest/$archive 2>/dev/null
				r=$?
			else
				sudo $backup - $fs 2>/dev/null|
				sudo dd $status of=$dest/$archive 2>/dev/null
				r=$?
			fi
		 fi
	            	if [ $r -eq 0 ]; then
				result="complete"
		    	else 
				result="failed"
		    	fi
		    	[ "$log" ] && {
			logger -t $cmd: "$fn on $host to $archive - $result."
		    	}
		    	[ $verbose ] && {
				echo $result >&2
		    	}
		done
		;;
	 lftp)
		[ $verbose ] && {
		    echo -n "$cmd using $backup to mirror $host to $dest: " >&2
		}
		$backup -u $user,$pass $ftphost -e "mirror --only-newer $src $dest;quit"	
		r=$?
	        if [ $r -eq 0 ]; then
			result="complete."
		else 
			result="failed."
		fi
		[ "$log" ] && {
			logger -t $cmd: "file system $fn to $archive - $result"
		}
		[ $verbose ] && {
			echo $result >&2
		}
		;;
	esac
}
_end
